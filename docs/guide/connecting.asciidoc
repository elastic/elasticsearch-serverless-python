[[connecting]]
== Connecting

This page contains the information you need to connect the Client with {es}.

[discrete]
[[connect-ec]]
=== Connecting to Elasticsearch Serverless

https://www.elastic.co/guide/en/cloud/current/ec-getting-started.html[Elastic Cloud] 
is the easiest way to get started with {es}. When connecting to Elastic Cloud 
with the Python {es} client you should always use the `cloud_id` 
parameter to connect. You can find this value within the "Manage Deployment" 
page after you've created a project (look in the top-left if you're in Kibana).

We recommend using a Cloud ID whenever possible because your client will be 
automatically configured for optimal use with Elastic Cloud including HTTPS and 
HTTP compression.

[source,python]
----
from elasticsearch_serverless import Elasticsearch

# Found in the 'Manage Deployment' page
CLOUD_ID = "project-name:dXMtZWFzdDQuZ2Nw..."

# Create the client project
client = Elasticsearch(
    cloud_id=CLOUD_ID,
    api_key=("api-key-id", "api-key-secret")
)

# Successful response!
client.info()
# {'name': 'instance-0000000000', 'cluster_name': ...}
----

[discrete]
[[authentication]]
=== Authentication

Authenticating to Elasticsearch Serverless is done using the API keys provided by Elastic.
Note that you should provide the values of `id` and `api_key` in a tuple.

API keys can be provided to the client constructor or via the per-request `.options()` method:

[discrete]
[[connecting-faas]]
=== Using the Client in a Function-as-a-Service Environment

This section illustrates the best practices for leveraging the {es} client in a 
Function-as-a-Service (FaaS) environment.

The most influential optimization is to initialize the client outside of the 
function, the global scope.

This practice does not only improve performance but also enables background 
functionality.
The following examples provide a skeleton for the best practices.

IMPORTANT: The async client shouldn't be used within Function-as-a-Service as a new event
           loop must be started for each invocation. Instead the synchronous `Elasticsearch`
           client is recommended.

[discrete]
[[connecting-faas-gcp]]
==== GCP Cloud Functions

[source,python]
----
from elasticsearch_serverless import Elasticsearch

# Client initialization
client = Elasticsearch(
    cloud_id="project-name:ABCD...",
    api_key=...
)

def main(request):
    # Use the client
    client.search(index=..., query={"match_all": {}})

----

[discrete]
[[connecting-faas-aws]]
==== AWS Lambda

[source,python]
----
from elasticsearch_serverless import Elasticsearch

# Client initialization
client = Elasticsearch(
    cloud_id="project-name:ABCD...",
    api_key=...
)

def main(event, context):
    # Use the client
    client.search(index=..., query={"match_all": {}})

----

[discrete]
[[connecting-faas-azure]]
==== Azure Functions

[source,python]
----
import azure.functions as func
from elasticsearch_serverless import Elasticsearch

# Client initialization
client = Elasticsearch(
    cloud_id="project-name:ABCD...",
    api_key=...
)

def main(request: func.HttpRequest) -> func.HttpResponse:
    # Use the client
    client.search(index=..., query={"match_all": {}})

----

Resources used to assess these recommendations:

* https://cloud.google.com/functions/docs/bestpractices/tips#use_global_variables_to_reuse_objects_in_future_invocations[GCP Cloud Functions: Tips & Tricks]
* https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html[Best practices for working with AWS Lambda functions]
* https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-python?tabs=azurecli-linux%2Capplication-level#global-variables[Azure Functions Python developer guide]
* https://docs.aws.amazon.com/lambda/latest/operatorguide/global-scope.html[AWS Lambda: Comparing the effect of global scope]
